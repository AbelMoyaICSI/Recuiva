#!/usr/bin/env python3
"""
Recuiva - Launcher de Embeddings
Permite elegir entre ejecuci√≥n en terminal o GUI visual

Autor: Abel Moya
Fecha: 30/09/2025
"""

import os
import sys
import subprocess

def mostrar_menu():
    """Mostrar men√∫ de opciones"""
    print("\n" + "="*60)
    print("üöÄ RECUIVA - GENERADOR DE EMBEDDINGS")
    print("   Evidencia T√©cnica HU-010: Active Recall Semantic Processing")
    print("="*60)
    print()
    print("Elige el modo de ejecuci√≥n:")
    print()
    print("1. üñ•Ô∏è  GUI VISUAL (Recomendado para demostraci√≥n)")
    print("   ‚Ä¢ Interfaz gr√°fica completa")
    print("   ‚Ä¢ Upload visual de PDF")
    print("   ‚Ä¢ Barras de progreso")
    print("   ‚Ä¢ M√©tricas en tiempo real")
    print("   ‚Ä¢ Perfecto para mostrar al profesor")
    print()
    print("2. üíª CONSOLA/TERMINAL (Modo t√©cnico)")
    print("   ‚Ä¢ Ejecuci√≥n por l√≠nea de comandos")
    print("   ‚Ä¢ Output detallado en terminal")
    print("   ‚Ä¢ Ideal para development/debugging")
    print()
    print("3. ‚ùì AYUDA")
    print("   ‚Ä¢ Informaci√≥n sobre el proyecto")
    print()
    print("4. üö™ SALIR")
    print()

def mostrar_ayuda():
    """Mostrar informaci√≥n de ayuda"""
    print("\n" + "="*60)
    print("üìö INFORMACI√ìN DEL PROYECTO")
    print("="*60)
    print()
    print("üéØ PROP√ìSITO:")
    print("   Este script genera embeddings (vectores sem√°nticos) para demostrar")
    print("   capacidades t√©cnicas de procesamiento sem√°ntico en el proyecto Recuiva.")
    print()
    print("üè´ CONTEXTO ACAD√âMICO:")
    print("   ‚Ä¢ Taller Integrador I - UPAO")
    print("   ‚Ä¢ Historia de Usuario HU-010: Implementaci√≥n de embeddings")
    print("   ‚Ä¢ Evidencia t√©cnica para presentaci√≥n al profesor")
    print("   ‚Ä¢ Demostraci√≥n de validaci√≥n sem√°ntica en Active Recall")
    print()
    print("‚öôÔ∏è TECNOLOG√çAS UTILIZADAS:")
    print("   ‚Ä¢ sentence-transformers (all-MiniLM-L6-v2)")
    print("   ‚Ä¢ PyPDF2 para lectura de PDF")
    print("   ‚Ä¢ NumPy para c√°lculos matem√°ticos")
    print("   ‚Ä¢ Tkinter para interfaz gr√°fica")
    print("   ‚Ä¢ JSON para almacenamiento de resultados")
    print()
    print("üìä FUNCIONALIDADES:")
    print("   ‚Ä¢ Lectura de archivos PDF y TXT")
    print("   ‚Ä¢ Divisi√≥n autom√°tica en chunks")
    print("   ‚Ä¢ Generaci√≥n de embeddings de 384 dimensiones")
    print("   ‚Ä¢ C√°lculo de similaridades coseno")
    print("   ‚Ä¢ Exportaci√≥n de resultados en JSON")
    print()
    print("üé¨ DEMOSTRACI√ìN:")
    print("   1. Selecciona un archivo PDF/TXT")
    print("   2. Observa el procesamiento en tiempo real")
    print("   3. Revisa las m√©tricas de similaridad")
    print("   4. Guarda los resultados como evidencia")
    print()
    print("‚úÖ EVIDENCIA GENERADA:")
    print("   ‚Ä¢ Archivo JSON con embeddings completos")
    print("   ‚Ä¢ M√©tricas de procesamiento")
    print("   ‚Ä¢ Top-3 chunks m√°s similares")
    print("   ‚Ä¢ Timestamps y metadata t√©cnica")
    print()

def verificar_dependencias():
    """Verificar si las dependencias est√°n instaladas"""
    try:
        import sentence_transformers
        transformers_ok = True
    except ImportError:
        transformers_ok = False
        
    try:
        import PyPDF2
        pdf_ok = True
    except ImportError:
        pdf_ok = False
        
    try:
        import tkinter
        tkinter_ok = True
    except ImportError:
        tkinter_ok = False
        
    return transformers_ok, pdf_ok, tkinter_ok

def instalar_dependencias():
    """Gu√≠a para instalar dependencias"""
    print("\n" + "‚ö†Ô∏è"*20)
    print("DEPENDENCIAS FALTANTES")
    print("‚ö†Ô∏è"*20)
    print()
    
    transformers_ok, pdf_ok, tkinter_ok = verificar_dependencias()
    
    if not transformers_ok:
        print("‚ùå sentence-transformers no est√° instalado")
        print("   Instalar con: pip install sentence-transformers")
        print()
        
    if not pdf_ok:
        print("‚ùå PyPDF2 no est√° instalado")
        print("   Instalar con: pip install PyPDF2")
        print()
        
    if not tkinter_ok:
        print("‚ùå tkinter no est√° disponible")
        print("   (Generalmente viene preinstalado con Python)")
        print()
        
    if transformers_ok and pdf_ok and tkinter_ok:
        print("‚úÖ Todas las dependencias est√°n instaladas!")
        return True
        
    print("üîß Para instalar todas las dependencias:")
    print("   pip install sentence-transformers PyPDF2 numpy")
    print()
    
    respuesta = input("¬øQuieres intentar instalar autom√°ticamente? (y/n): ")
    if respuesta.lower() in ['y', 'yes', 's', 'si']:
        try:
            print("Instalando dependencias...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", 
                                 "sentence-transformers", "PyPDF2", "numpy<2"])
            print("‚úÖ Dependencias instaladas exitosamente!")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error instalando dependencias: {e}")
            return False
    
    return False

def ejecutar_gui():
    """Ejecutar la interfaz gr√°fica"""
    transformers_ok, pdf_ok, tkinter_ok = verificar_dependencias()
    
    if not tkinter_ok:
        print("‚ùå Error: tkinter no est√° disponible.")
        print("La GUI requiere tkinter que viene preinstalado con Python.")
        input("Presiona Enter para continuar...")
        return
        
    print("\nüöÄ Iniciando GUI Visual...")
    print("   ‚Ä¢ Cargando interfaz gr√°fica")
    print("   ‚Ä¢ Inicializando componentes")
    
    try:
        # Importar y ejecutar GUI
        import embeddings_gui
        print("   ‚Ä¢ ‚úÖ GUI cargada exitosamente")
        print("\nüí° La ventana deber√≠a aparecer en unos segundos...")
        print("üí° Si no aparece, revisa si est√° minimizada en la barra de tareas")
        
        # Ejecutar GUI
        embeddings_gui.main()
        
    except ImportError as e:
        print(f"\n‚ùå Error importando GUI: {e}")
        print("Aseg√∫rate de que embeddings_gui.py est√© en el mismo directorio")
        input("Presiona Enter para continuar...")
    except Exception as e:
        print(f"\n‚ùå Error ejecutando GUI: {e}")
        input("Presiona Enter para continuar...")

def ejecutar_consola():
    """Ejecutar en modo consola"""
    print("\nüíª Iniciando modo consola...")
    print("   ‚Ä¢ Cargando script de terminal")
    
    try:
        # Verificar si existe el script original
        if os.path.exists("embeddings_local.py"):
            print("   ‚Ä¢ ‚úÖ Script encontrado: embeddings_local.py")
            print("\n" + "-"*50)
            
            # Ejecutar script original
            subprocess.run([sys.executable, "embeddings_local.py"])
            
            print("-"*50)
        else:
            print("   ‚Ä¢ ‚ùå Script embeddings_local.py no encontrado")
            print("\nCreando versi√≥n b√°sica de consola...")
            
            # Crear versi√≥n b√°sica si no existe
            crear_script_basico_consola()
            
    except Exception as e:
        print(f"\n‚ùå Error ejecutando script de consola: {e}")
        input("Presiona Enter para continuar...")

def crear_script_basico_consola():
    """Crear script b√°sico de consola si no existe"""
    script_basico = """#!/usr/bin/env python3
# Script b√°sico de consola para embeddings
print("Ejecutando script b√°sico de embeddings...")
print("Para funcionalidad completa, usa embeddings_local.py")
"""
    
    with open("embeddings_console_basic.py", "w") as f:
        f.write(script_basico)
        
    subprocess.run([sys.executable, "embeddings_console_basic.py"])

def main():
    """Funci√≥n principal del launcher"""
    
    while True:
        mostrar_menu()
        
        try:
            opcion = input("Selecciona una opci√≥n (1-4): ").strip()
            
            if opcion == "1":
                ejecutar_gui()
                
            elif opcion == "2":
                ejecutar_consola()
                
            elif opcion == "3":
                mostrar_ayuda()
                input("\nPresiona Enter para volver al men√∫...")
                
            elif opcion == "4":
                print("\nüëã ¬°Gracias por usar Recuiva Embeddings Generator!")
                print("   Proyecto: Active Recall Semantic Processing")
                print("   Autor: Abel Moya - Taller Integrador I UPAO")
                print()
                break
                
            else:
                print("\n‚ùå Opci√≥n no v√°lida. Selecciona 1, 2, 3 o 4.")
                input("Presiona Enter para continuar...")
                
        except KeyboardInterrupt:
            print("\n\nüëã Saliendo del programa...")
            break
        except Exception as e:
            print(f"\n‚ùå Error inesperado: {e}")
            input("Presiona Enter para continuar...")

if __name__ == "__main__":
    print("üöÄ Recuiva Embeddings Launcher")
    print("   Inicializando sistema...")
    
    # Verificar dependencias al inicio
    transformers_ok, pdf_ok, tkinter_ok = verificar_dependencias()
    
    if not (transformers_ok and pdf_ok):
        print("\n‚ö†Ô∏è Algunas dependencias no est√°n instaladas.")
        if not instalar_dependencias():
            print("\nüí° Puedes continuar, pero algunas funciones estar√°n limitadas.")
            print("üí° Los embeddings se generar√°n en modo 'mock' si no est√°n las librer√≠as.")
            input("Presiona Enter para continuar...")
    
    main()